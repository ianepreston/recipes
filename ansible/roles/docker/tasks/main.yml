---
# Should only run if the directory doesn't already exist
- name: Copy configs from nas
  become: true
  copy:
    remote_src: yes
    force: no
    src: "/net/laconia/volume1/Resilio\ Sync/docker_conf"
    dest: /home/ansible
    owner: ansible
    group: ssh
    # mode: u=rwX

- name: Enable docker service
  systemd:
    name: docker
    enabled: yes
    state: started

- name: Disable firewalld service
  systemd:
    name: firewalld
    enabled: no
    state: stopped

- name: Create download network
  community.general.docker_network:
    name: "download_network"

- name: Create miniflux rss network
  community.general.docker_network:
    name: "miniflux_network"

- name: Create calibre network
  community.general.docker_network:
    name: "calibre_network"

- name: Create Wallabag network
  community.general.docker_network:
    name: "wallabag_network"

- name: Create Kodi network
  community.general.docker_network:
    name: "kodi_network"

- name: Start watchtower
  become: true
  docker_container:
    name: watchtower
    hostname: watchtower
    image: containrrr/watchtower:latest
    command: --cleanup --label-enable --schedule="0 2 * * *"
    state: started
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      PGID: "1000"
      PUID: "1000"
    restart_policy: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      com.centurylinklabs.watchtower.enable: "true"

- name: Start traefik
  become: true
  docker_container:
    name: traefik
    hostname: traefik
    image: traefik:latest
    state: started
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      PGID: "1000"
      PUID: "1000"
    restart_policy: unless-stopped
    published_ports:
      - "80:80"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      com.centurylinklabs.watchtower.enable: "true"
    networks_cli_compatible: "no"
    networks:
      - name: "miniflux_network"
      - name: "download_network"
      - name: "calibre_network"
      - name: "wallabag_network"


- name: Start Resilio sync
  become: true
  docker_container:
    name: resilio-sync
    hostname: resilio-sync
    image: ghcr.io/linuxserver/resilio-sync
    state: started
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      PGID: "1000"
      PUID: "1000"
      UMASK_SET: "022"
    restart_policy: unless-stopped
    volumes:
      - /home/ansible/docker_conf/resilio:/config
      - /home/ansible/docker_conf/resilio/downloads:/downloads
      - /home/ansible/:/sync
    published_ports:
      - 8888:8888
      - 55555:55555
    labels:
      com.centurylinklabs.watchtower.enable: "true"

- name: Start unifi
  become: true
  docker_container:
    name: unifi-controller
    hostname: unifi-controller
    image: ghcr.io/linuxserver/unifi-controller:latest
    state: started
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      PGID: "1000"
      PUID: "1000"
      MEM_LIMIT: "1024M"
    restart_policy: unless-stopped
    volumes:
      - /home/ansible/docker_conf/unifi:/config
    published_ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
      - 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514 #optional
    labels:
      com.centurylinklabs.watchtower.enable: "true"

- name: Start download containers
  become: true
  docker_container:
    name: "{{ item.name }}"
    hostname: "{{ item.name }}"
    image: "{{ item.image }}"
    state: started
    network_mode: "download_network"
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      PGID: "1000"
      PUID: "1000"
    published_ports: "{{ item.ports }}"
    restart_policy: unless-stopped
    volumes: "{{ item.volumes }}"
    labels:
      com.centurylinklabs.watchtower.enable: "true"
  loop:
    - {
        name: sabnzbd,
        image: ghcr.io/linuxserver/sabnzbd:latest,
        ports: ["8082:8080"],
        volumes:
          [
            "/home/ansible/docker_conf/sabnzbd:/config",
            "/mnt/content/Downloads/complete:/downloads",
            "/mnt/content/Downloads/incomplete:/incomplete-downloads",
            "/mnt/content/Downloads/watch:/watch",
          ],
      }
    - {
        name: nzbhydra,
        image: ghcr.io/linuxserver/nzbhydra2:latest,
        ports: ["5076:5076"],
        volumes:
          [
            "/home/ansible/docker_conf/nzbhydra:/config",
            "/mnt/content/Downloads/complete:/downloads",
          ],
      }
    - {
        name: bazarr,
        image: ghcr.io/linuxserver/bazarr:latest,
        ports: ["6767:6767"],
        volumes:
          [
            "/home/ansible/docker_conf/bazarr:/config",
            "/mnt/content/TV:/tv",
            "/mnt/content/Movies:/movies"
          ],
      }
    - {
        name: sonarr,
        image: ghcr.io/linuxserver/sonarr:latest,
        ports: ["8989:8989"],
        volumes:
          [
            "/home/ansible/docker_conf/sonarr:/config",
            "/mnt/content/Downloads/complete:/downloads",
            "/mnt/content/TV:/tv"
          ],
      }
    - {
        name: radarr,
        image: ghcr.io/linuxserver/radarr:latest,
        ports: ["7878:7878"],
        volumes:
          [
            "/home/ansible/docker_conf/radarr:/config",
            "/mnt/content/Downloads/complete:/downloads",
            "/mnt/content/Movies:/movies"
          ],
      }
    - {
        name: mylar,
        image: ghcr.io/linuxserver/mylar3:latest,
        ports: ["8090:8090"],
        volumes:
          [
            "/home/ansible/docker_conf/mylar:/config/mylar",
            "/mnt/content/Downloads/complete:/downloads",
            "/mnt/content/Comics:/comics"
          ],
      }
    - {
        name: unbooquity,
        image: ghcr.io/linuxserver/ubooquity:latest,
        ports: ["2202:2202", "2203:2203"],
        volumes:
          [
            "/home/ansible/docker_conf/ubooquity:/config",
            "/mnt/content/ubooquity_books:/books",
            "/mnt/content/Comics:/comics"
          ],
      }

- name: Start postgres container for Miniflux
  become: true
  docker_container:
    name: miniflux-postgres
    hostname: miniflux-postgres
    image: postgres:latest
    networks:
      - name: "miniflux_network"
    state: started
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      PGID: "1000"
      PUID: "1000"
      UMASK_SET: "022"
      POSTGRES_USER: "miniflux"
      POSTGRES_PASSWORD: "secret"
    restart_policy: unless-stopped
    volumes:
      - "/home/ansible/docker_conf/miniflux_postgres:/var/lib/postgresql/data"
    labels:
      com.centurylinklabs.watchtower.enable: "true"

- name: Start Miniflux
  become: true
  docker_container:
    name: miniflux
    hostname: miniflux
    image: miniflux/miniflux:latest
    networks:
      - name: "miniflux_network"
    state: started
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      PGID: "1000"
      PUID: "1000"
      DATABASE_URL: "postgres://miniflux:secret@miniflux-postgres/miniflux?sslmode=disable"
      BASE_URL: "http://miniflux.ian.ca"
      RUN_MIGRATIONS: "1"
      CREATE_ADMIN: "1"
      ADMIN_USERNAME: "admin"
      ADMIN_PASSWORD: "test123"
    restart_policy: unless-stopped
    exposed_ports:
      - "8080"
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      traefik.enable: "true"
      traefik.http.routers.miniflux.rule: Host(`miniflux.ian.ca`)
      traefik.http.routers.miniflux.entrypoints: web


- name: Start calibre
  become: true
  docker_container:
      name: calibre
      hostname: calibre
      image: ghcr.io/linuxserver/calibre
      networks:
        - name: "calibre_network"
      state: started
      container_default_behavior: compatibility
      env:
        TZ: "America/Edmonton"
        PGID: "1000"
        PUID: "1000"
      restart_policy: unless-stopped
      volumes:
        [
          "/home/ansible/docker_conf/calibre:/config",
          "/mnt/content/books:/books",
        ]
      exposed_ports:
        - "8080"
        - "8081"
      published_ports:
        - "9091:8081"
        - "9090:9090"
        - "9090:9090/udp"
      labels:
        com.centurylinklabs.watchtower.enable: "true"
        traefik.enable: "true"
        traefik.http.routers.calibre-desk.rule: Host(`calibre-desk.ian.ca`)
        traefik.http.routers.calibre-desk.service: calibre-desk
        traefik.http.services.calibre-desk.loadbalancer.server.port: "8080"
        traefik.http.routers.calibre-desk.entrypoints: web
        traefik.http.routers.calibre-web.rule: Host(`calibre-web.ian.ca`)
        traefik.http.routers.calibre-web.service: calibre-web
        traefik.http.services.calibre-web.loadbalancer.server.port: "8081"
        traefik.http.routers.calibre-web.entrypoints: web


- name: Start mariadb container for wallabag
  become: true
  docker_container:
    name: wallabag-mariadb
    hostname: wallabag-mariadb
    image: mariadb:latest
    networks:
      - name: "wallabag_network"
    state: started
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
      MYSQL_ROOT_PASSWORD: "secret"
    restart_policy: unless-stopped
    volumes:
      - "/home/ansible/docker_conf/wallabag_mariadb:/var/lib/mysql"
    labels:
      com.centurylinklabs.watchtower.enable: "true"

- name: Start redis for wallabag
  become: true
  docker_container:
    name: wallabag-redis
    hostname: wallabag-redis
    image: redis:alpine
    networks:
      - name: "wallabag_network"
    state: started
    container_default_behavior: compatibility
    env:
      TZ: "America/Edmonton"
    restart_policy: unless-stopped
    volumes:
      - "/home/ansible/docker_conf/wallabag_redis:/data"
    labels:
      com.centurylinklabs.watchtower.enable: "true"

- name: Start wallabag
  become: true
  docker_container:
      name: wallabag
      hostname: wallabag
      image: wallabag/wallabag:latest
      networks:
        - name: "wallabag_network"
      state: started
      container_default_behavior: compatibility
      env:
        TZ: "America/Edmonton"
        MYSQL_ROOT_PASSWORD: "secret"
        SYMFONY__ENV__DATABASE_DRIVER: pdo_mysql
        SYMFONY__ENV__DATABASE_HOST: wallabag-mariadb
        SYMFONY__ENV__DATABASE_PORT: "3306"
        SYMFONY__ENV__DATABASE_NAME: wallabag
        SYMFONY__ENV__DATABASE_USER: wallabag
        SYMFONY__ENV__DATABASE_PASSWORD: wallabag123
        SYMFONY__ENV__DOMAIN_NAME: http://wallabag.ian.ca
      restart_policy: unless-stopped
      volumes:
        - "/home/ansible/docker_conf/wallabag:/var/www/wallabag/web/assets/images"
      exposed_ports:
        - "80"
      labels:
        com.centurylinklabs.watchtower.enable: "true"
        traefik.enable: "true"
        traefik.http.routers.wallabag.rule: Host(`wallabag.ian.ca`)
        traefik.http.routers.wallabag.entrypoints: web


# Note that if the configs for this get lost you'll have to
# configure a Kodi user again, check the Kodi docs
- name: Start mariadb container for kodi
  become: true
  docker_container:
    name: kodi-mariadb
    hostname: kodi-mariadb
    image: mariadb:latest
    networks:
      - name: "kodi_network"
    state: started
    container_default_behavior: compatibility
    published_ports: "3306:3306"
    env:
      TZ: "America/Edmonton"
      MYSQL_ROOT_PASSWORD: "secret"
    restart_policy: unless-stopped
    volumes:
      - "/home/ansible/docker_conf/kodi_mariadb:/var/lib/mysql"
    labels:
      com.centurylinklabs.watchtower.enable: "true"
